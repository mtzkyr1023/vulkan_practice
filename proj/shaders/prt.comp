#version 450


layout(local_size_x=8, local_size_y=8, local_size_z=1) in;

layout(set=0, binding=0) buffer ShCoeffs
{
	vec3 shCoeffs[9];
} sb0;
layout(set=1, binding=0) uniform textureCube cubeMap;
layout(set=2, binding=0) uniform sampler clampSampler;

mat3 evalSH9(vec3 dir);
vec3 getCubemapDirection(int face, float u, float v);

shared vec3 sShCoeff[CUBEMAP_SIZE][9];

void main()
{
	uvec3 gtid = gl_GlobalInvocationID;
	
	int face = int(gtid.z);
	int x = int(gtid.x);
	int y = int(gtid.y);
	
	float u = float(x) / CUBEMAP_SIZE;
	float v = float(y) / CUBEMAP_SIZE;
	
	vec3 dir = getCubemapDirection(face, u, v);
	
	vec3 color = texture(samplerCube(cubeMap, clampSampler), dir).rgb;
	
	mat3 sh = evalSH9(dir);
	
	for (int i = 0; i < 9; i++)
	{
		int ix = i % 3;
		int iy = i / 3;
		float b = sh[iy][ix];
		
		sShCoeff[x][i] = color * b;
	}
	
	memoryBarrierShared();
	barrier();
	
	if (x == 0 && y == 0)
	{
		vec3 groupSh[9];
		for (int i = 0; i < 9; i++)
		{
			groupSh[i] = vec3(0.0f);
		}
		
		
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < CUBEMAP_SIZE; j++)
			{
				groupSh[i] += sShCoeff[j][i];
			}
		}
		
		for (int i = 0; i < 9; i++)
		{
			sb0.shCoeffs[i] += groupSh[i];
		}
	}
}


mat3 evalSH9(vec3 dir)
{
	float x = dir.x;
	float y = dir.y;
	float z = dir.z;
	
	mat3 sh;
	
	sh[0][0] = 0.282095f;
	
	sh[0][1] = 0.488603f * y;
	sh[0][2] = 0.488603f * z;
	sh[1][0] = 0.488603f * x;
	
	sh[1][1] = 1.092548f * x * y;
	sh[1][2] = 1.092548f * y * z;
	sh[2][0] = 0.315392f * (3.0f * z * z - 1.0f);
	sh[2][1] = 1.092548f * x * z;
	sh[2][2] = 0.546274f * (x * x - y * y);
	
	return sh;
}

vec3 getCubemapDirection(int face, float u, float v)
{
	if (face == 0) return normalize(vec3(1, -v, -u));
	if (face == 1) return normalize(vec3(-1, -v, u));
	if (face == 2) return normalize(vec3(u, 1, v));
	if (face == 3) return normalize(vec3(u, -1, -v));
	if (face == 4) return normalize(vec3(u, -v, 1));
	if (face == 5) return normalize(vec3(-u, -v, -1));
	
	return vec3(0.0f);
}