#version 450


const int BLUR_SIZE = 16;
const int THREADS_PER_GROUP = 256;
const int SCAN_SIZE = THREADS_PER_GROUP + BLUR_SIZE;
const int TEX_SIZE = 2048;

layout(rg32f, set=0, binding=0) uniform image2D srcTex;
layout(rg32f, set=0, binding=1) uniform image2D dstTex;

layout(set=1, binding=0) uniform GaussCoeff
{
	float weights[BLUR_SIZE];
} ub0;

layout(local_size_x=THREADS_PER_GROUP, local_size_y=1, local_size_z=1) in;

shared vec2 cache[SCAN_SIZE];

void main()
{
	int localThreadId = int(gl_LocalInvocationID.x);
	int GlobalThreadId = int(gl_GlobalInvocationID.x);
	int location = localThreadId;
	
	for (; location < SCAN_SIZE; location += THREADS_PER_GROUP)
	{
		int samplePoint = clamp(GlobalThreadId - BLUR_SIZE / 2, 0, TEX_SIZE - 1);
		cache[location] =
			imageLoad(srcTex,
						ivec2(samplePoint,
						gl_GlobalInvocationID.y)).xy;
	}
	
	
	groupMemoryBarrier();
	barrier();
	
	vec2 result = vec2(0.0f);
	
	for (int i = 0; i < BLUR_SIZE; i++)
	{
		result += cache[clamp(localThreadId + i - BLUR_SIZE / 2, 0, SCAN_SIZE - 1)] * ub0.weights[i];
	}
	
	imageStore(dstTex, ivec2(gl_GlobalInvocationID.xy), vec4(result, 0.0f, 0.0f));
}